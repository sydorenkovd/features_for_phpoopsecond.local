--http://dev.mysql.com/doc/refman/5.1/en/memory-storage-engine.html

Механизм хранения MEMORY  (ранее известный как HEAP ) создает специальные таблицы с содержимым, которые хранятся в памяти. Поскольку данные уязвимы для сбоев, проблем с оборудованием или перебоев в подаче электроэнергии, использовать  эти таблицы нужно только как временные рабочие зоны или только для чтения кэша для данных, выбранных из других таблиц.


Ограничения хранилища 	RAM 
Транзакции 	Нет 
Детальная блокировка На уровне таблицы
MVCC (Управление конкурентным доступом с помощью многоверсионности (англ. MVCC — MultiVersion Concurrency Control))	Нет 	
Поддержка геопространственных данных  Нет
Индексация геопространственных данных	Нет
B-дерево индекс	Да 	
Hash индексов 	Да
Полнотекстовый индекс поиска 	Нет
Кластеризованные индекс 	Нет 
Данные кэша 	Н/А
Индекс кэш 	Н/А
Упаковка данных Нет
Шифрованние данных 	Да 
Поддержка кластеров баз данных 	Нет
Поддержка репликации Да 	
Внешние ключи	Нет 	
Резервное копирование / точка-в-время восстановления	Да
Поддержка запросов  кэша 	Да 
Обновление статистики словарей данных Да 		


Что лучше использовать MEMORY или MySQL Cluster.
Разработчикам, использующим приложения работающие с  механизмом хранения MEMORY  для хранения важных данных, данных требующих высокой степени доступности, или часто обновляемых данных следует рассмотреть вопрос о преимуществах MySQL Cluster.

 Типичный случай использования движка MEMORY  включает в себя следующие характеристики:
- Операции, связанные с временными, не критичечными к потерям , такие как управление сессией или кэшированием. При остановке сервера MySQL или его перезагрузке, данные в памяти таблицы теряется.

- Хранилища памяти для быстрого доступа и низкой латентности. Объем данных может поместиться целиком в памяти, не вызывая при этом замены из страниц виртуальной памяти операционной системой.

-Только для чтения или для чтения и доступа к данным, главным образом шаблонным (ограниченный обновлений).
	
MySQL Cluster предлагает те же функции, как механизм хранения MEMORY с более высоким уровнем производительности, а также предоставляет дополнительные возможности, которые недоступны при работе с механизмом хранения MEMORY:

     Блокировка на уровне строк и несколько потоков операций с низким уровнем конкуренции между клиентами.

     Масштабируемость даже с выражениями содержащими запись.

     Дополнительные дисковые операции для надежности сохранения данных.

     Распределенная вычислительная архитектура(http://en.wikipedia.org/wiki/Shared_nothing_architecture) с несколькими хостами обеспечивают работу без единой точки отказа, что позволяет сохранить 99,999% доступности.

     Автоматическое распределение данных между узлами, разработчикам приложений не нужно обрабатывать свои решения для разбиения данных .

     Поддержка переменной длины типов данных (включая BLOB и TEXT) не поддерживаемых в MEMORY.
	